%--------------------EVALUATOR----------------------
@Author â€“ Aishwarya Prabha Ramakrishnan

% In Progress

program_eval(P,X,Y,Z) :- update(x,X,[],Env1), update(y,Y,Env1,Env), eval_p(P,Env,Z).  
eval_p(t_p(X),Env,NewEnv) :- eval_k(X,Env,Env1), lookup(z,Env1,NewEnv).
eval_k(t_k(X,Y),Env,NewEnv) :- eval_stmt(X,Env,Env1), eval_k(Y,Env1,NewEnv).
eval_k(t_k(X),Env,NewEnv) :- eval_stmt(X,Env,NewEnv).
eval_stmt(t_d(X),Env,NewEnv) :- eval_d(X,Env,NewEnv).
eval_stmt(t_i(X),Env,NewEnv) :- eval_i(X,Env,NewEnv).
eval_stmt(t_a(X),Env,NewEnv) :- eval_a(X,Env,NewEnv).
eval_stmt(t_if(X),Env,NewEnv) :- eval_if(X,Env,NewEnv).
eval_stmt(t_while(X,Y),Env,NewEnv) :- eval_b(X,Env,true), eval_k(Y,Env,NewEnv).
eval_stmt(t_for(X),Env,NewEnv) :- eval_for(X,Env,NewEnv).
eval_stmt(t_print(X),Env,NewEnv) :- eval_print(X,Env,NewEnv).
eval_stmt(t_u(X),Env,NewEnv) :- eval_u(X,Env,NewEnv).
eval_stmt(X,Env,NewEnv).
eval_d(t_dval(X),Env,NewEnv) :- eval_expr(X,Env,NewEnv), update (X,Env,Env,NewEnv).
eval_i(t_inval(X,Y),Env,NewEnv) :- eval_expr(X,Id), eval_expr(t_num(Y),Env,Val), update(Id,Val,Env,NewEnv).
eval_i(t_ibval(X,Y),Env,NewEnv) :- eval_expr(X,Id), eval_expr(t_b(Y),Env,Val), update(Id,Val,Env,NewEnv).
eval_i(t_isval(X,Y),Env,NewEnv) :- eval_expr(X,Id), eval_expr(t_s(Y),Env,Val), update(Id,Val,Env,NewEnv).
eval_a(t_ae(X,Y),Env,NewEnv) :- eval_expr(X,Id), eval_expr(t_e(Y),Env,Val),
update(Id,Val,Env,NewEnv).
eval_a(t_ab(X,Y),Env,NewEnv) :- eval_expr(X,Id), eval_expr(t_e(Y),Env,Val),
update(Id,Val,Env,NewEnv).
eval_a(t_as(X,Y),Env,NewEnv) :- eval_expr(X,Id), eval_expr(t_s(Y),Env,Val), update(Id,Val,Env,NewEnv).
eval_u(++(X),Env,NewEnv) :- eval_expr(X,Id), Env1 is Id+1, update(Id,Env1,Env,NewEnv).
eval_u(--(X),Env,NewEnv) :- eval_expr(X,Id), Env1 is Id-1, update(Id,Env1,Env,NewEnv).


eval_print(t_sprint(X),Env,NewEnv) :- eval_expr(X,Id), write(Id).
eval_print(t_idprint(X),Env,NewEnv) :- eval_expr(X,Id), write(Id).
eval_print(t_print(X,Y),Env,NewEnv) :- eval_expr(X,Id1), eval_expr(Y,Id2), write(Id1), write(Id2).
eval_b(t_bool_t,_Env,true).
eval_b(t_bool_f,_Env,false).
eval_b(t_not(B),Env,NewEnv) :- eval_b(B,Env,Env1), not(Env1,NewEnv).
eval_b(t_or(X,Y),Env,NewEnv) :- eval_b(X,Env,Env1), eval_b(Y,Env,Env2), or(Env1,Env2,NewEnv).
eval_b(t_and(X,Y),Env,NewEnv) :- eval_b(X,Env,Env1), eval(Y,Env,Env2), and(Env1,Env2,NewEnv).
eval_b(t_c(X),Env,NewEnv) :- eval_c(X,Env,NewEnv).
not(true,false).
not(false,true).
or(Val1,Val2,true) :- Val1=true, Val2 =true.
or(Val1,Val2,true) :- Val1=true, Val2=false.
or(Val1,Val2,true) :- Val1=false, Val2=true.
or(Val1,Val2,false) :- Val1=false, Val2=false.
and(Val1,Val2,true) :- Val1=true, Val2=true.
and(Val1,Val2,false) :- Val1=true, Val2=false.
and(Val1,Val2,false) :- Val1=false, Val2=true.
and(Val1,Val2,false) :- Val1=false, Val2=false.
eval_c(<(X,Y),Env,NewEnv) :- eval_expr(X,Env,Env1), eval_expr(Y,Env,Env2), lt(Env1,Env2,NewEnv).
eval_c(>(X,Y),Env,NewEnv) :- eval_expr(X,Env,Env1), eval_expr(Y,Env,Env2), gt(Env1,Env2,NewEnv).
eval_c(<=(X,Y),Env,NewEnv) :- eval_expr(X,Env,Env1), eval_expr(Y,Env,Env2), ltequal(Env1,Env2,NewEnv).
eval_c(>=(X,Y),Env,NewEnv) :- eval_expr(X,Env,Env1), eval_expr(Y,Env,Env2), gtequal(Env1,Env2,NewEnv).
eval_c(=(X,Y),Env,NewEnv) :- eval_expr(X,Env,Env1), eval_expr(Y,Env,Env2), equal(Env1,Env2,NewEnv).
lt(Val1,Val2,true) :- Val1<Val2.
lt(Val1,Val2,false) :- Val1>Val2.
gt(Val1,Val2,true) :- Val1>Val2.
gt(Val1,Val2,false) :- Val1<Val2.
ltequal(Val1,Val2,true) :- Val1<=Val2.
ltequal(Val1,Val2,false) :- Val1>Val2.
gtequal(Val1,Val2,true) :- Val1>=Val2.
gtequal(Val1,Val2,false) :- Val1<Val2.
equal(Val1,Val2,true) :- Val1=Val2.
equal(Val1,Val2,false) :- Val1\=Val2.
eval_expr(+(X,Y),Env,NewEnv) :- eval_expr(X,Env,Env1), eval_expr(Y,Env,Env2), NewEnv is Env1+Env2.
eval_expr(-(X,Y),Env,NewEnv) :- eval_expr(X,Env,Env1), eval_expr(Y,Env,Env2), NewEnv is Env1-Env2.
eval_expr(*(X,Y),Env,NewEnv) :- eval_expr(X,Env,Env1), eval_expr(Y,Env,Env2), NewEnv is Env1*Env2.
eval_expr(/(X,Y),Env,NewEnv) :- eval_expr(X,Env,Env1), eval_expr(Y,Env,Env2), NewEnv is Env1/Env2.
eval_expr(t_id(X),Env,NewEnv) :- eval_id(X,Env,NewEnv).
eval_expr(t_num(X),_Env,X).
eval_expr(t_t(X),Env,NewEnv) :- eval_t(X,Env,NewEnv).
eval_id(t_id(H|X),Env,NewEnv) :- eval_idd(X,L), Z=[H|L],lookup(Z,Env,Env1), update(X,Env1,Env,NewEnv).
eval_idd(t_idd(H|X),Z) :- eval_idd(X,L), Z=[H|L].
eval_idd(t_idd([]),[]).



lookup(Id, [(Id,Val)|_], Val). 
lookup(Id, [_|T], Val):- lookup(Id,T,Val). 
lookup(Id, [], _Val):- write(Id), write("Id not found"), fail. 

update(Id, Val, [], [(Id, Val)]). 
update(Id, Val, [(Id,_)|T], [(Id, Val)|T]). 
update(Id, Val, [H|T], [H|R]):- H\= (Id,_), update(Id, Val, T, R).

